Aim: Program for DCT/IDCT computation.
Objective: Program for DCT/IDCT computation.
Tools Required: MATLAB R2015a
Commands used:
clc; → Clears the command window.
clear all; → Clears all variables from the workspace.
close all; → Closes all figure windows.
m = input("Enter the basis matrix dimension: "); → Takes user input for matrix dimension.
ones(1, n) * sqrt(2/n); → Creates a row vector of ones and scales it.
cos((2*x+1)*u*pi/(2*n)) → Computes the cosine function for DCT (Discrete Cosine
Transform) basis.
subplot(m, n, k); → Creates subplots in a m×n grid.
imshow(mag(i, j), 256); → Displays the basis function as an image.
figure(3); → Creates a new figure window.
Nested for loops (for u=0:m-1, etc.) → Iterates over matrix indices to compute the basic
functions.
Theory: A discrete cosine transform (DCT) expresses a finite sequence of data points in terms
of a sum of cosine functions oscillating at different frequencies. DCTs are important to
numerous applications in science and engineering, from lossy
compression of audio (e.g. MP3) and images (e.g. JPEG) (where small high-frequency
components can be discarded), to spectral methods for the numerical solution of partial
differential equations. The use of cosine rather than sine functions is critical for compression,
since it turns out (as described below) that fewer cosine functions are needed to approximate a
typical signal, whereas for differential equations the cosines express a particular choice of
boundary conditions.
In particular, a DCT is a Fourier-related transform similar to the discrete Fourier transform
(DFT), but using only real numbers. The DCTs are generally related to Fourier Series
coefficients of a periodically and symmetrically extended sequence whereas DFTs are related
to Fourier Series coefficients of a periodically extended sequence. DCTs are equivalent to DFTs
of roughly twice the length, operating on real data with even symmetry (since the Fourier
transform of a real and even function is real and even), whereas in some variants the input
and/or output data are shifted by half a sample. There are eight standard DCT variants, of which
four are common.
Like for the DFT, the normalization factor in front of these transform definitions is merely a
convention and differs between treatments. For example, some authors multiply the transforms
by so that the inverse does not require any additional multiplicative factor. Combined with
appropriate factors of √(2/N), this can be used to make the transform matrix orthogonal.
PROGRAM:
clc;
clear all;
close all;
m=input("Enter the basis matrix dimension: ');
alpha2=ones(1,n)*sqrt(2/n); alpha2(1) sqrt(1/n); alpha1-ones[1,m)*sqrt(2/m);
alpha(1) sqrt(1/m); % square root. for u=0:m-1
% Request user input
for v-0:n-1 for x=0:m-1 for y=0:n-1
end
a(u+1,v+1)(x+1,y+1)-alpha1(u+1) alpha2(v+1)"
cos((2x+1)*u*pi/(2*n))*cos((2y+1)*v*pi/(2*m));
end
end
end
mag-a; igure(3) k-1;
% Code to plot the basis
for i=1:m
for j=1:n
subplot(m,n,k)
imshow(mag(i,j),256)
k=k+1;
% Create igure graphics object
% Create axes in tiled positions % Display image
end
end
Enter the basis matrix dimension: 5
Results:
Output Image
Conclusion: Thus, we have obtained the DCT/IDCT for the image
